pipeline {
    agent { label 'ubuntu-slave' }

    environment {
        ECR_REGISTRY = '740127659061.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_NAME = 'sample-webapp'
        REGION = 'us-east-1'
    }

    stages {
        stage("Checkout Code") {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: "https://github.com/Rajasekharbcr/sample-webapp.git",
                        credentialsId: "github_token"
                    ]]
                ])
            }
        }

        stage("Build") {
            steps {
                sh 'mvn clean install'
            }
        }

        stage("Test") {
            steps {
                sh 'mvn test'
            }
        }

        stage("Deploy To Artifactory") {
            steps {
                configFileProvider([configFile(fileId: '0ee7a9ad-59fd-4d2c-af45-3033f5efd747', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn deploy -s $MAVEN_SETTINGS'
                }
            }
        }

        stage("Docker Build") {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage("Push Docker Image to ECR") {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS ECR credentials'
                ]]) {
                    sh '''
                        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                        docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:latest
                        docker push $ECR_REGISTRY/$IMAGE_NAME:latest
                    '''
                }
            }
        }

        stage("Run Docker Container") {
            steps {
                sh '''
                    docker stop sample-webapp || true
                    docker rm sample-webapp || true
                    docker run -d --name sample-webapp -p 8080:8080 $IMAGE_NAME:latest
                '''
            }
        }
    }
}
